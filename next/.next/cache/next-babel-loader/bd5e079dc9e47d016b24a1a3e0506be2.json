{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/esm/extends\";\n\nvar _this = this,\n    _jsxFileName = \"/Users/churabou/study/react/css-tutorial/pages/posts/[page].tsx\";\n\nimport React from \"react\";\nvar __jsx = React.createElement;\nimport App from \"../../components/page\";\nimport LiveEditor from \"../../components/liveEditor\";\nimport ReactMarkdown from \"react-markdown\";\nimport styled from \"styled-components\";\n\nvar _MDWapper = styled.div.withConfig({\n  displayName: \"page___MDWapper\",\n  componentId: \"mxv6kk-0\"\n})([\"h1,h2,h3,h4{color:var(--theme-color);}\"]);\n\nvar MarkdownBlock = function MarkdownBlock(_ref) {\n  var content = _ref.content;\n  return __jsx(_MDWapper, {\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82,\n      columnNumber: 3\n    }\n  }, __jsx(ReactMarkdown, {\n    source: content,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 83,\n      columnNumber: 5\n    }\n  }));\n}; // これでlinkを外から入れらるようになった。\n// mdからメニューを取得してページングできるはず。\n// ぱすぱらむを取得すれば（static prposで)\n\n\n_c = MarkdownBlock;\n\nvar createProps = function createProps(sections) {\n  return {\n    LinkComponent: function LinkComponent(item) {\n      return __jsx(\"span\", {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 7\n        }\n      }, __jsx(\"a\", {\n        href: item.item.path,\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 9\n        }\n      }, item.item.title));\n    },\n    sections: sections\n  };\n};\n\nvar Page = function Page(_ref2) {\n  var post = _ref2.post,\n      sections = _ref2.sections;\n  var menuProps = createProps(sections);\n\n  var Content = function Content() {\n    return __jsx(\"div\", {\n      style: {\n        padding: \"40px\"\n      },\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 5\n      }\n    }, post.contents.map(function (content, i) {\n      var key = \"\".concat(content.type, \"-\").concat(i);\n\n      if (content.type === \"markdown\" || contets.type === \"common-css\") {\n        return __jsx(MarkdownBlock, {\n          key: key,\n          content: content.value,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 108,\n            columnNumber: 18\n          }\n        });\n      }\n\n      if (content.type === \"frontmatter\") {\n        return __jsx(_MDWapper, {\n          key: key,\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 112,\n            columnNumber: 13\n          }\n        }, __jsx(\"h1\", {\n          __self: _this,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 113,\n            columnNumber: 15\n          }\n        }, content.value.title));\n      }\n\n      return __jsx(LiveEditor, _extends({\n        key: key\n      }, content.value, {\n        __self: _this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 16\n        }\n      }));\n    }));\n  };\n\n  return __jsx(App, {\n    content: __jsx(Content, {\n      __self: _this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 24\n      }\n    }),\n    menu: menuProps,\n    __self: _this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 121,\n      columnNumber: 10\n    }\n  });\n};\n\n_c2 = Page;\nexport var __N_SSG = true;\nexport default Page;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"MarkdownBlock\");\n$RefreshReg$(_c2, \"Page\");","map":{"version":3,"sources":["/Users/churabou/study/react/css-tutorial/pages/posts/[page].tsx"],"names":["App","LiveEditor","ReactMarkdown","styled","_MDWapper","div","MarkdownBlock","content","createProps","sections","LinkComponent","item","path","title","Page","post","menuProps","Content","padding","contents","map","i","key","type","contets","value"],"mappings":";;;;;;;AAAA,OAAOA,GAAP,MAAgB,uBAAhB;AAGA,OAAOC,UAAP,MAAuB,6BAAvB;AACA,OAAOC,aAAP,MAA0B,gBAA1B;AACA,OAAOC,MAAP,MAAmB,mBAAnB;;AAkEA,IAAMC,SAAS,GAAGD,MAAM,CAACE,GAAV;AAAA;AAAA;AAAA,8CAAf;;AASA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB;AAAA,MAAGC,OAAH,QAAGA,OAAH;AAAA,SACpB,MAAC,SAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACE,MAAC,aAAD;AAAe,IAAA,MAAM,EAAEA,OAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADF,CADoB;AAAA,CAAtB,C,CAMA;AACA;AACA;;;KARMD,a;;AASN,IAAME,WAAW,GAAG,SAAdA,WAAc,CAACC,QAAD;AAAA,SAAqC;AACvDC,IAAAA,aAAa,EAAE,uBAACC,IAAD,EAAe;AAC5B,aACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SACE;AAAG,QAAA,IAAI,EAAEA,IAAI,CAACA,IAAL,CAAUC,IAAnB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAA0BD,IAAI,CAACA,IAAL,CAAUE,KAApC,CADF,CADF;AAKD,KAPsD;AAQvDJ,IAAAA,QAAQ,EAARA;AARuD,GAArC;AAAA,CAApB;;AAWA,IAAMK,IAAqB,GAAG,SAAxBA,IAAwB,QAAwB;AAAA,MAArBC,IAAqB,SAArBA,IAAqB;AAAA,MAAfN,QAAe,SAAfA,QAAe;AACpD,MAAMO,SAAS,GAAGR,WAAW,CAACC,QAAD,CAA7B;;AACA,MAAMQ,OAAO,GAAG,SAAVA,OAAU;AAAA,WACd;AAAK,MAAA,KAAK,EAAE;AAAEC,QAAAA,OAAO,EAAE;AAAX,OAAZ;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACGH,IAAI,CAACI,QAAL,CAAcC,GAAd,CAAkB,UAACb,OAAD,EAAiBc,CAAjB,EAA+B;AAChD,UAAMC,GAAG,aAAMf,OAAO,CAACgB,IAAd,cAAsBF,CAAtB,CAAT;;AACA,UAAId,OAAO,CAACgB,IAAR,KAAiB,UAAjB,IAA+BC,OAAO,CAACD,IAAR,KAAiB,YAApD,EAAkE;AAChE,eAAO,MAAC,aAAD;AAAe,UAAA,GAAG,EAAED,GAApB;AAAyB,UAAA,OAAO,EAAEf,OAAO,CAACkB,KAA1C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,UAAP;AACD;;AACD,UAAIlB,OAAO,CAACgB,IAAR,KAAiB,aAArB,EAAoC;AAClC,eACE,MAAC,SAAD;AAAW,UAAA,GAAG,EAAED,GAAhB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WACE;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,WAAKf,OAAO,CAACkB,KAAR,CAAcZ,KAAnB,CADF,CADF;AAKD;;AACD,aAAO,MAAC,UAAD;AAAY,QAAA,GAAG,EAAES;AAAjB,SAA0Bf,OAAO,CAACkB,KAAlC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,SAAP;AACD,KAbA,CADH,CADc;AAAA,GAAhB;;AAkBA,SAAO,MAAC,GAAD;AAAK,IAAA,OAAO,EAAE,MAAC,OAAD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,MAAd;AAA2B,IAAA,IAAI,EAAET,SAAjC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAP;AACD,CArBD;;MAAMF,I;;AAuBN,eAAeA,IAAf","sourcesContent":["import App from \"../../components/page\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport LiveEditor from \"../../components/liveEditor\";\nimport ReactMarkdown from \"react-markdown\";\nimport styled from \"styled-components\";\nimport { transformContent, Token } from \"../../lib/transform\";\nimport { Props as MenuProps } from \"../../components/menu\";\n\ninterface Section {\n  title: string;\n  items: {\n    title: string;\n    path: string;\n  }[];\n}\n\nconst fetchSections = (): Section[] => {\n  const postsDirectory = path.join(process.cwd(), \"contents\");\n  const sectionDirectories = fs.readdirSync(postsDirectory);\n  return sectionDirectories.map((section) => {\n    const filenames = fs.readdirSync(path.join(postsDirectory, section));\n    return {\n      title: section,\n      items: filenames.map((name) => ({\n        title: name,\n        path: `${section}.${name}`,\n      })),\n    };\n  });\n};\n\nconst loadContent = (filename: string): Token[] => {\n  const filePath = path.join(process.cwd(), \"contents\", filename);\n  const fileContents = fs.readFileSync(path.join(filePath), \"utf8\");\n  const content = transformContent(fileContents);\n  return content;\n};\n\nexport async function getStaticPaths() {\n  const contents = fetchSections().map((section: Section) =>\n    section.items.map((item) => ({\n      params: { page: item.path },\n    }))\n  );\n  // flatten\n  const paths = Array.prototype.concat.apply([], contents);\n  return { paths, fallback: false };\n}\n\nexport async function getStaticProps({ params }: any) {\n  // HACK section1.demoみたいになっているのでsection1/demoにする\n  const path = params.page.replace(\".\", \"/\");\n  const props: Props = {\n    post: {\n      contents: loadContent(path),\n    },\n    sections: fetchSections(),\n  };\n  return {\n    props,\n  };\n}\n\ninterface Props {\n  post: {\n    contents: Token[];\n  };\n  sections: Section[];\n}\n\nconst _MDWapper = styled.div`\n  h1,\n  h2,\n  h3,\n  h4 {\n    color: var(--theme-color);\n  }\n`;\n\nconst MarkdownBlock = ({ content }: { content: string }) => (\n  <_MDWapper>\n    <ReactMarkdown source={content} />\n  </_MDWapper>\n);\n\n// これでlinkを外から入れらるようになった。\n// mdからメニューを取得してページングできるはず。\n// ぱすぱらむを取得すれば（static prposで)\nconst createProps = (sections: Section[]): MenuProps => ({\n  LinkComponent: (item: any) => {\n    return (\n      <span>\n        <a href={item.item.path}>{item.item.title}</a>\n      </span>\n    );\n  },\n  sections,\n});\n\nconst Page: React.FC<Props> = ({ post, sections }) => {\n  const menuProps = createProps(sections);\n  const Content = () => (\n    <div style={{ padding: \"40px\" }}>\n      {post.contents.map((content: Token, i: number) => {\n        const key = `${content.type}-${i}`;\n        if (content.type === \"markdown\" || contets.type === \"common-css\") {\n          return <MarkdownBlock key={key} content={content.value} />;\n        }\n        if (content.type === \"frontmatter\") {\n          return (\n            <_MDWapper key={key}>\n              <h1>{content.value.title}</h1>\n            </_MDWapper>\n          );\n        }\n        return <LiveEditor key={key} {...content.value} />;\n      })}\n    </div>\n  );\n  return <App content={<Content />} menu={menuProps} />;\n};\n\nexport default Page;\n"]},"metadata":{},"sourceType":"module"}