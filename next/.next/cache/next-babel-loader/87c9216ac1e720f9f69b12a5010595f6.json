{"ast":null,"code":"import matter from \"gray-matter\";\nexport const transformContent = content => {\n  let results = [];\n  let block = \"\";\n  const data = matter(content);\n  results.push({\n    type: \"frontmatter\",\n    value: data.data\n  });\n  let type = \"markdown\";\n  data.content.split(\"\\n\").forEach((line, i) => {\n    if (line.includes(\"BEGIN_COMMON_CSS\")) {\n      if (block !== \"\") {\n        results.push({\n          type: \"markdown\",\n          value: block\n        });\n      }\n\n      type = \"common-css\";\n      block = \"\";\n      return;\n    }\n\n    if (line.includes(\"BEGIN_LIVE_EDITOR\")) {\n      if (block !== \"\") {\n        results.push({\n          type: \"markdown\",\n          value: block\n        });\n      }\n\n      type = \"live-editor\";\n      block = \"\";\n      return;\n    }\n\n    if (line.includes(\"END_COMMON_CSS\")) {\n      results.push({\n        type,\n        value: block\n      });\n      block = \"\";\n      return;\n    }\n\n    if (line.includes(\"END_LIVE_EDITOR\")) {\n      results.push({\n        type,\n        value: block\n      });\n      block = \"\";\n      return;\n    }\n\n    block += line + \"\\n\";\n  });\n  results.push({\n    type: \"markdown\",\n    value: block\n  });\n  results = results.map(token => {\n    let next = token;\n\n    if (token.type === \"live-editor\") {\n      next.value = pulckHtmlCss(token.value);\n    }\n\n    return next;\n  });\n  return results;\n};\n\nfunction pulckHtmlCss(content) {\n  let html = \"\";\n  let css = \"\";\n  let type = \"none\";\n  content.split(\"\\n\").forEach(line => {\n    if (line.includes(\"```\") && line.includes(\"html\")) {\n      type = \"html\";\n      return;\n    }\n\n    if (line.includes(\"```\") && line.includes(\"css\")) {\n      type = \"css\";\n      return;\n    }\n\n    if (line.includes(\"```\")) {\n      type = \"none\";\n      return;\n    }\n\n    if (type === \"html\") {\n      html += line + \"\\n\";\n    }\n\n    if (type === \"css\") {\n      css += line + \"\\n\";\n    }\n  });\n  return {\n    html,\n    css\n  };\n}","map":{"version":3,"sources":["/Users/churabou/study/react/css-tutorial/lib/transform.ts"],"names":["matter","transformContent","content","results","block","data","push","type","value","split","forEach","line","i","includes","map","token","next","pulckHtmlCss","html","css"],"mappings":"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","sourcesContent":["import matter from \"gray-matter\";\n\nexport interface Token {\n  type: \"markdown\" | \"live-editor\" | \"frontmatter\" | \"common-css\";\n  value: any;\n}\n\nexport const transformContent = (content: string) => {\n  let results: Token[] = [];\n  let block = \"\";\n\n  const data = matter(content);\n\n  results.push({ type: \"frontmatter\", value: data.data });\n\n  let type: Token[\"type\"] = \"markdown\";\n\n  data.content.split(\"\\n\").forEach((line, i) => {\n    if (line.includes(\"BEGIN_COMMON_CSS\")) {\n      if (block !== \"\") {\n        results.push({ type: \"markdown\", value: block });\n      }\n      type = \"common-css\";\n      block = \"\";\n      return;\n    }\n\n    if (line.includes(\"BEGIN_LIVE_EDITOR\")) {\n      if (block !== \"\") {\n        results.push({ type: \"markdown\", value: block });\n      }\n      type = \"live-editor\";\n      block = \"\";\n      return;\n    }\n\n    if (line.includes(\"END_COMMON_CSS\")) {\n      results.push({ type, value: block });\n      block = \"\";\n      return;\n    }\n\n    if (line.includes(\"END_LIVE_EDITOR\")) {\n      results.push({ type, value: block });\n      block = \"\";\n      return;\n    }\n\n    block += line + \"\\n\";\n  });\n\n  results.push({ type: \"markdown\", value: block });\n\n  results = results.map((token) => {\n    let next = token;\n    if (token.type === \"live-editor\") {\n      next.value = pulckHtmlCss(token.value);\n    }\n    return next;\n  });\n  return results;\n};\n\nfunction pulckHtmlCss(content: string) {\n  let html = \"\";\n  let css = \"\";\n  let type: \"html\" | \"css\" | \"none\" = \"none\";\n\n  content.split(\"\\n\").forEach((line) => {\n    if (line.includes(\"```\") && line.includes(\"html\")) {\n      type = \"html\";\n      return;\n    }\n    if (line.includes(\"```\") && line.includes(\"css\")) {\n      type = \"css\";\n      return;\n    }\n\n    if (line.includes(\"```\")) {\n      type = \"none\";\n      return;\n    }\n\n    if (type === \"html\") {\n      html += line + \"\\n\";\n    }\n\n    if (type === \"css\") {\n      css += line + \"\\n\";\n    }\n  });\n  return { html, css };\n}\n"]},"metadata":{},"sourceType":"module"}