{"ast":null,"code":"var _jsxFileName = \"/Users/churabou/study/react/css-tutorial/pages/posts/[page].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nimport Page from \"../../components/page\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport LiveEditor from \"../../components/liveEditor\";\nimport Markdown from \"../../components/Markdown\";\nimport { transformContent, pulckHtmlCss } from \"../../lib/transform\";\n\nconst fetchSections = () => {\n  const postsDirectory = path.join(process.cwd(), \"contents\");\n  const sectionDirectories = fs.readdirSync(postsDirectory);\n  return sectionDirectories.map(section => {\n    const filenames = fs.readdirSync(path.join(postsDirectory, section));\n    return {\n      title: section,\n      items: filenames.map(name => ({\n        title: name,\n        path: `${section}.${name}`\n      }))\n    };\n  });\n};\n\nconst loadContent = filename => {\n  const filePath = path.join(process.cwd(), \"contents\", filename);\n  const fileContents = fs.readFileSync(path.join(filePath), \"utf8\");\n  const content = transformContent(fileContents);\n  return content;\n};\n\nexport async function getStaticPaths() {\n  const contents = fetchSections().map(section => section.items.map(item => ({\n    params: {\n      page: item.path\n    }\n  }))); // flatten\n\n  const paths = Array.prototype.concat.apply([], contents);\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  // HACK section1.demoみたいになっているのでsection1/demoにする\n  const path = params.page.replace(\".\", \"/\");\n  const props = {\n    post: {\n      contents: loadContent(path)\n    },\n    sections: fetchSections()\n  };\n  return {\n    props\n  };\n} // これでlinkを外から入れらるようになった。\n// mdからメニューを取得してページングできるはず。\n// ぱすぱらむを取得すれば（static prposで)\n\nconst createProps = sections => ({\n  LinkComponent: item => {\n    return __jsx(\"a\", {\n      href: item.item.path,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 69,\n        columnNumber: 12\n      }\n    }, item.item.title);\n  },\n  sections\n});\n\nconst App = ({\n  post,\n  sections\n}) => {\n  var _post$contents$find;\n\n  const menuProps = createProps(sections);\n  const commonCSS = pulckHtmlCss(((_post$contents$find = post.contents.find(c => c.type === \"common-css\")) === null || _post$contents$find === void 0 ? void 0 : _post$contents$find.value) || \"\").css;\n\n  const Content = () => __jsx(\"div\", {\n    style: {\n      padding: \"40px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 89,\n      columnNumber: 5\n    }\n  }, post.contents.map((content, i) => {\n    const key = `${content.type}-${i}`;\n\n    if (content.type === \"markdown\" || content.type === \"common-css\") {\n      return __jsx(Markdown, {\n        key: key,\n        content: content.value,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 93,\n          columnNumber: 18\n        }\n      });\n    }\n\n    if (content.type === \"frontmatter\") {\n      return __jsx(\"div\", {\n        key: key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 13\n        }\n      }, __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 15\n        }\n      }, content.value.title));\n    }\n\n    return __jsx(LiveEditor, _extends({\n      key: key\n    }, _objectSpread({\n      commonCSS\n    }, content.value), {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 16\n      }\n    }));\n  }));\n\n  return __jsx(Page, {\n    content: __jsx(Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 106,\n        columnNumber: 25\n      }\n    }),\n    menu: menuProps,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 106,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default App;","map":{"version":3,"sources":["/Users/churabou/study/react/css-tutorial/pages/posts/[page].tsx"],"names":["Page","path","fs","LiveEditor","Markdown","transformContent","pulckHtmlCss","fetchSections","postsDirectory","join","process","cwd","sectionDirectories","readdirSync","map","section","filenames","title","items","name","loadContent","filename","filePath","fileContents","readFileSync","content","getStaticPaths","contents","item","params","page","paths","Array","prototype","concat","apply","fallback","getStaticProps","replace","props","post","sections","createProps","LinkComponent","App","menuProps","commonCSS","find","c","type","value","css","Content","padding","i","key"],"mappings":"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","sourcesContent":["import Page from \"../../components/page\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport LiveEditor from \"../../components/liveEditor\";\nimport Markdown from \"../../components/Markdown\";\nimport { transformContent, Token, pulckHtmlCss } from \"../../lib/transform\";\nimport { Props as MenuProps } from \"../../components/menu\";\n\ninterface Section {\n  title: string;\n  items: {\n    title: string;\n    path: string;\n  }[];\n}\n\nconst fetchSections = (): Section[] => {\n  const postsDirectory = path.join(process.cwd(), \"contents\");\n  const sectionDirectories = fs.readdirSync(postsDirectory);\n  return sectionDirectories.map((section) => {\n    const filenames = fs.readdirSync(path.join(postsDirectory, section));\n    return {\n      title: section,\n      items: filenames.map((name) => ({\n        title: name,\n        path: `${section}.${name}`,\n      })),\n    };\n  });\n};\n\nconst loadContent = (filename: string): Token[] => {\n  const filePath = path.join(process.cwd(), \"contents\", filename);\n  const fileContents = fs.readFileSync(path.join(filePath), \"utf8\");\n  const content = transformContent(fileContents);\n  return content;\n};\n\nexport async function getStaticPaths() {\n  const contents = fetchSections().map((section: Section) =>\n    section.items.map((item) => ({\n      params: { page: item.path },\n    }))\n  );\n  // flatten\n  const paths = Array.prototype.concat.apply([], contents);\n  return { paths, fallback: false };\n}\n\nexport async function getStaticProps({ params }: any) {\n  // HACK section1.demoみたいになっているのでsection1/demoにする\n  const path = params.page.replace(\".\", \"/\");\n  const props: Props = {\n    post: {\n      contents: loadContent(path),\n    },\n    sections: fetchSections(),\n  };\n  return {\n    props,\n  };\n}\n\n// これでlinkを外から入れらるようになった。\n// mdからメニューを取得してページングできるはず。\n// ぱすぱらむを取得すれば（static prposで)\nconst createProps = (sections: Section[]): MenuProps => ({\n  LinkComponent: (item: any) => {\n    return <a href={item.item.path}>{item.item.title}</a>;\n  },\n  sections,\n});\n\ninterface Props {\n  post: {\n    contents: Token[];\n  };\n  sections: Section[];\n}\n\nconst App: React.FC<Props> = ({ post, sections }) => {\n  const menuProps = createProps(sections);\n\n  const commonCSS = pulckHtmlCss(\n    post.contents.find((c) => c.type === \"common-css\")?.value || \"\"\n  ).css;\n\n  const Content = () => (\n    <div style={{ padding: \"40px\" }}>\n      {post.contents.map((content: Token, i: number) => {\n        const key = `${content.type}-${i}`;\n        if (content.type === \"markdown\" || content.type === \"common-css\") {\n          return <Markdown key={key} content={content.value} />;\n        }\n        if (content.type === \"frontmatter\") {\n          return (\n            <div key={key}>\n              <h1>{content.value.title}</h1>\n            </div>\n          );\n        }\n        return <LiveEditor key={key} {...{ commonCSS, ...content.value }} />;\n      })}\n    </div>\n  );\n  return <Page content={<Content />} menu={menuProps} />;\n};\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}