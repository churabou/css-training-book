{"ast":null,"code":"var _jsxFileName = \"/Users/churabou/study/react/css-tutorial/pages/posts/[page].tsx\";\nimport React from \"react\";\nvar __jsx = React.createElement;\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nimport App from \"../../components/page\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport LiveEditor from \"../../components/liveEditor\";\nimport ReactMarkdown from \"react-markdown\";\nimport styled from \"styled-components\";\nimport { transformContent, pulckHtmlCss } from \"../../lib/transform\";\n\nconst fetchSections = () => {\n  const postsDirectory = path.join(process.cwd(), \"contents\");\n  const sectionDirectories = fs.readdirSync(postsDirectory);\n  return sectionDirectories.map(section => {\n    const filenames = fs.readdirSync(path.join(postsDirectory, section));\n    return {\n      title: section,\n      items: filenames.map(name => ({\n        title: name,\n        path: `${section}.${name}`\n      }))\n    };\n  });\n};\n\nconst loadContent = filename => {\n  const filePath = path.join(process.cwd(), \"contents\", filename);\n  const fileContents = fs.readFileSync(path.join(filePath), \"utf8\");\n  const content = transformContent(fileContents);\n  return content;\n};\n\nexport async function getStaticPaths() {\n  const contents = fetchSections().map(section => section.items.map(item => ({\n    params: {\n      page: item.path\n    }\n  }))); // flatten\n\n  const paths = Array.prototype.concat.apply([], contents);\n  return {\n    paths,\n    fallback: false\n  };\n}\nexport async function getStaticProps({\n  params\n}) {\n  // HACK section1.demoみたいになっているのでsection1/demoにする\n  const path = params.page.replace(\".\", \"/\");\n  const props = {\n    post: {\n      contents: loadContent(path)\n    },\n    sections: fetchSections()\n  };\n  return {\n    props\n  };\n}\n\nconst _MDWapper = styled.div.withConfig({\n  displayName: \"page___MDWapper\",\n  componentId: \"mxv6kk-0\"\n})([\"h1,h2,h3,h4{color:var(--theme-color);}\"]);\n\nconst MarkdownBlock = ({\n  content\n}) => __jsx(_MDWapper, {\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 82,\n    columnNumber: 3\n  }\n}, __jsx(ReactMarkdown, {\n  source: content,\n  __self: this,\n  __source: {\n    fileName: _jsxFileName,\n    lineNumber: 83,\n    columnNumber: 5\n  }\n})); // これでlinkを外から入れらるようになった。\n// mdからメニューを取得してページングできるはず。\n// ぱすぱらむを取得すれば（static prposで)\n\n\nconst createProps = sections => ({\n  LinkComponent: item => {\n    return __jsx(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 7\n      }\n    }, __jsx(\"a\", {\n      href: item.item.path,\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 9\n      }\n    }, item.item.title));\n  },\n  sections\n});\n\nconst Page = ({\n  post,\n  sections\n}) => {\n  const menuProps = createProps(sections);\n  const x = post.contents.find(c => c.type === \"common-css\");\n  console.log(pulckHtmlCss(x.value));\n\n  const Content = () => __jsx(\"div\", {\n    style: {\n      padding: \"40px\"\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 5\n    }\n  }, post.contents.map((content, i) => {\n    const key = `${content.type}-${i}`;\n\n    if (content.type === \"markdown\" || content.type === \"common-css\") {\n      return __jsx(MarkdownBlock, {\n        key: key,\n        content: content.value,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 112,\n          columnNumber: 18\n        }\n      });\n    }\n\n    if (content.type === \"frontmatter\") {\n      return __jsx(_MDWapper, {\n        key: key,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 116,\n          columnNumber: 13\n        }\n      }, __jsx(\"h1\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 117,\n          columnNumber: 15\n        }\n      }, content.value.title));\n    }\n\n    return __jsx(LiveEditor, _extends({\n      key: key\n    }, content.value, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 121,\n        columnNumber: 16\n      }\n    }));\n  }));\n\n  return __jsx(App, {\n    content: __jsx(Content, {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 24\n      }\n    }),\n    menu: menuProps,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 10\n    }\n  });\n};\n\nexport default Page;","map":{"version":3,"sources":["/Users/churabou/study/react/css-tutorial/pages/posts/[page].tsx"],"names":["App","path","fs","LiveEditor","ReactMarkdown","styled","transformContent","pulckHtmlCss","fetchSections","postsDirectory","join","process","cwd","sectionDirectories","readdirSync","map","section","filenames","title","items","name","loadContent","filename","filePath","fileContents","readFileSync","content","getStaticPaths","contents","item","params","page","paths","Array","prototype","concat","apply","fallback","getStaticProps","replace","props","post","sections","_MDWapper","div","MarkdownBlock","createProps","LinkComponent","Page","menuProps","x","find","c","type","console","log","value","Content","padding","i","key"],"mappings":"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","sourcesContent":["import App from \"../../components/page\";\nimport path from \"path\";\nimport fs from \"fs\";\nimport LiveEditor from \"../../components/liveEditor\";\nimport ReactMarkdown from \"react-markdown\";\nimport styled from \"styled-components\";\nimport { transformContent, Token, pulckHtmlCss } from \"../../lib/transform\";\nimport { Props as MenuProps } from \"../../components/menu\";\n\ninterface Section {\n  title: string;\n  items: {\n    title: string;\n    path: string;\n  }[];\n}\n\nconst fetchSections = (): Section[] => {\n  const postsDirectory = path.join(process.cwd(), \"contents\");\n  const sectionDirectories = fs.readdirSync(postsDirectory);\n  return sectionDirectories.map((section) => {\n    const filenames = fs.readdirSync(path.join(postsDirectory, section));\n    return {\n      title: section,\n      items: filenames.map((name) => ({\n        title: name,\n        path: `${section}.${name}`,\n      })),\n    };\n  });\n};\n\nconst loadContent = (filename: string): Token[] => {\n  const filePath = path.join(process.cwd(), \"contents\", filename);\n  const fileContents = fs.readFileSync(path.join(filePath), \"utf8\");\n  const content = transformContent(fileContents);\n  return content;\n};\n\nexport async function getStaticPaths() {\n  const contents = fetchSections().map((section: Section) =>\n    section.items.map((item) => ({\n      params: { page: item.path },\n    }))\n  );\n  // flatten\n  const paths = Array.prototype.concat.apply([], contents);\n  return { paths, fallback: false };\n}\n\nexport async function getStaticProps({ params }: any) {\n  // HACK section1.demoみたいになっているのでsection1/demoにする\n  const path = params.page.replace(\".\", \"/\");\n  const props: Props = {\n    post: {\n      contents: loadContent(path),\n    },\n    sections: fetchSections(),\n  };\n  return {\n    props,\n  };\n}\n\ninterface Props {\n  post: {\n    contents: Token[];\n  };\n  sections: Section[];\n}\n\nconst _MDWapper = styled.div`\n  h1,\n  h2,\n  h3,\n  h4 {\n    color: var(--theme-color);\n  }\n`;\n\nconst MarkdownBlock = ({ content }: { content: string }) => (\n  <_MDWapper>\n    <ReactMarkdown source={content} />\n  </_MDWapper>\n);\n\n// これでlinkを外から入れらるようになった。\n// mdからメニューを取得してページングできるはず。\n// ぱすぱらむを取得すれば（static prposで)\nconst createProps = (sections: Section[]): MenuProps => ({\n  LinkComponent: (item: any) => {\n    return (\n      <span>\n        <a href={item.item.path}>{item.item.title}</a>\n      </span>\n    );\n  },\n  sections,\n});\n\nconst Page: React.FC<Props> = ({ post, sections }) => {\n  const menuProps = createProps(sections);\n\n  const x = post.contents.find((c) => c.type === \"common-css\");\n\n  console.log(pulckHtmlCss(x.value));\n  const Content = () => (\n    <div style={{ padding: \"40px\" }}>\n      {post.contents.map((content: Token, i: number) => {\n        const key = `${content.type}-${i}`;\n        if (content.type === \"markdown\" || content.type === \"common-css\") {\n          return <MarkdownBlock key={key} content={content.value} />;\n        }\n        if (content.type === \"frontmatter\") {\n          return (\n            <_MDWapper key={key}>\n              <h1>{content.value.title}</h1>\n            </_MDWapper>\n          );\n        }\n        return <LiveEditor key={key} {...content.value} />;\n      })}\n    </div>\n  );\n  return <App content={<Content />} menu={menuProps} />;\n};\n\nexport default Page;\n"]},"metadata":{},"sourceType":"module"}